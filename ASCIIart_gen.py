# -*- coding: utf-8 -*-
"""Proyecto_Final_(ASCIIart_Generator).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aDBMZgBzh0cZkJNpvHPyKRmTHmqjPDrL
"""

from PIL import Image                                                           #Importamos el modulo Image de la librería Pillow
from math import floor

    #Datos
simbolos_ASCII=['.',':',';','+','*','?','%','W','#','@'][::-1]                        #Definimos una serie de simbolos a usar, simulando la intensidad en una imagen
destino=input('Inserte el nombre de un archivo de imagen en una ruta válida')  #Pedimos al usuario el nombre de un archivo de imagen, incluyendo la extención del archivo, para guardarla en una variable que luego usaremos para leer más facilmente
imagen=Image.open(destino)                                                  #Abrimos la imagen a usar desdelos archivos del proyecto y la guardamos en la variable imagen
texto=open('ASCII_ART.txt','w')                                             #Creamos y abrimos un archivo de texto en el cual escribiremos la imagen ASCII 
ancho,alto=imagen.size                                                          #Definimos las variables de altura y anchura de la imagen
pix=imagen.load()                                                               #Cargamos los datos de los píxeles de la imagen y los almacenamos en la variable pix
constante=(len(simbolos_ASCII))/255                                             #Hallamos una constante para asignar los simbolos a pixeles, dividiendo el número de caracteres en la lista simbolos_ASCII por 255, esto es ya que 255 es el numero máximo que puede tomar el codigo de un codigo de color

    #Funciones
def caracter(g):                                                                #Definimos una función para asignar un caracter a un pixel
  char=floor(g*constante)                                                       #Obtenemos una variable char, redondeando hacia abajo la multiplicación de el valor del pixel en la escala de grises por la constante previamente encontrada
  if char==10:                                                                  #Establecemos una condición que determine el valor dentro de la lista para char cuando es igual a 10, en 9, debido a que si dejamos tal como esta, 10, al ubicarlo en la lista tendremos que se sale del tamaño de la lista
    return simbolos_ASCII[9]
  else:                                                                         #No hay problema con el resto de valores asi que los dejamos tal como están
    return simbolos_ASCII[char]
  
     #Lógica  
          #Rescalamos la imagen original
relacion=alto/ancho                                                             #Hallamos la relación entre el alto y el ancho de la imagen original 
n_ancho=200                                                                     #Le damos un nuevo valor a la anchura (la anchura en el texto corresponde al numero de columnas en una fila),para posteriormente calcular la altura, en este caso 100 pixeles
n_alto=int(n_ancho*(relacion/2))                                                #Calculamos el nuevo valor de la altura, hallando el valor entero de multiplicar el nuevo valor de la anchura, por la relación.(La relación la dividimos entre dos debido a que la altura de los caracteres es mayor máso menos dos veces a la anchura, si no hacemos esto, la imagen resultante dará la impresion de ser más alta que la original)
rescalado=imagen.resize((n_ancho,n_alto))                                       #Damos nuevos valores de dimensiones a la imagen original y almacenamos esto en una variable
rescalado=rescalado.convert('RGB')                                              #Convertimos el modo de la imagen a RGB, esto para evitar problemas con algunas imagenes png con fondo transparente, cuyo modo es RGBA
pix2=rescalado.load()                                                           #Cargamos nuevamente los datos de los píxeles de la imagen y los almacenamos en la variable pix2

          #Convertimos los datos RGB de la imagen a una en Blanco y Negro
for i in range(n_alto):                                                         #Creamos un ciclo que lea de arriba hacia abajo y de izquierda a derecha los datos de color de la imagen
  for j in range(n_ancho):
    R,G,B=pix2[j,i]
    g=int(R/3+G/3+B/3)                                                          #Para cada pixel toma los 3 valores RGB los divide cada uno entre 3 y los suma, bara obtener una variable g correspondiente a la escala de grises
    pix2[j,i]=(g,g,g)
    texto.write(caracter(g))                                                #Llamamos la funcion mencionada anteriormente, y escribimos progresivamente el simbolo correspondiente en el archivo de texto
  texto.write('\n')                                                         #Ponemos un salto de linea en el archivo de texto para dividir las filas

rescalado.save('salida.jpg')

